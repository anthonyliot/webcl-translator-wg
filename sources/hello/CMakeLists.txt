GET_FILENAME_COMPONENT(NAME "${CMAKE_CURRENT_SOURCE_DIR}" NAME)
MESSAGE(STATUS "Samples ${NAME}")

FILE(GLOB_RECURSE CL_KERNELS ${CMAKE_CURRENT_SOURCE_DIR}/*.cl)

FOREACH (KERNEL ${CL_KERNELS})
    WEBCLTRANSLATOR_MAKE_INCLUDABLE(${KERNEL} ${KERNEL}.resources)
ENDFOREACH ()

IF (EMSCRIPTEN)
    # EMSCRIPTEN IS USING EXECUTABLE TO GENERATE JS FILE
    ADD_EXECUTABLE(${NAME} ${NAME}.cpp)
    TARGET_INCLUDE_DIRECTORIES(${NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/)
    TARGET_INCLUDE_DIRECTORIES(${NAME} PRIVATE ${OpenCL_INCLUDE_DIR})
    INSTALL(FILES "$<TARGET_FILE_DIR:${APP}>/${APP}.js"
                  "$<TARGET_FILE_DIR:${APP}>/${APP}.wasm"
            DESTINATION ${CMAKE_CURRENT_LIST_DIR}/docs/dist)
ELSE ()
    ENABLE_TESTING()
    ADD_LIBRARY(${NAME} ${NAME}.cpp)
    ADD_DEPENDENCIES(${NAME} cl::wrapper)

    # CREATE TEST EXECUTABLE
    ADD_EXECUTABLE(${NAME}_test)
    TARGET_SOURCES(${NAME}_test PRIVATE ${NAME}.test.cpp)
    TARGET_LINK_LIBRARIES(${NAME}_test PRIVATE ${NAME} cl::wrapper gtest_main)
    TARGET_INCLUDE_DIRECTORIES(
        ${NAME}_test PRIVATE ${WEBCLTRANSLATOR_ROOT}/externs/clwrapper)
    GTEST_DISCOVER_TESTS(${NAME}_test)

    # CREATE BENCHMARK EXECUTABLE
    ADD_EXECUTABLE(${NAME}_benchmark)
    TARGET_SOURCES(${NAME}_benchmark PRIVATE ${NAME}.benchmark.cpp)
    TARGET_LINK_LIBRARIES(${NAME}_benchmark PRIVATE ${NAME} cl::wrapper pthread
                                                    benchmark::benchmark_main)
    TARGET_INCLUDE_DIRECTORIES(
        ${NAME}_benchmark PRIVATE ${WEBCLTRANSLATOR_ROOT}/externs/clwrapper)

    ADD_TEST(${NAME}_test ${NAME}_test)
    ADD_TEST(${NAME}_benchmark ${NAME}_benchmark)
ENDIF ()
